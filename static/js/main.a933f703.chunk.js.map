{"version":3,"sources":["logo.svg","components/card/cards.jsx","components/cardList/card-list.jsx","components/search/search.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","className","src","monstor","id","name","email","CardList","monstors","map","key","Search","type","placeholder","onChange","searchFtn","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredValue","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,2LCE9BC,G,wBAAQ,SAAAC,GAAK,OACtB,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,4BAAKJ,EAAMG,QAAQE,MACnB,2BAAIL,EAAMG,QAAQG,UCHbC,EAAW,SAAAP,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAAK,kBAAC,EAAD,CAAOO,IAAKP,EAAQC,GAAID,QAASA,SCH5DQ,G,MAAS,SAAAX,GAAK,OACvB,2BAAOC,UAAU,aACbW,KAAK,SACLC,YAAY,kBACZC,SAAUd,EAAMe,cC0ETC,E,YAzEb,aAAe,IAAD,8BACZ,+CAkDFD,UAAY,SAACE,GACX,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlDtC,EAAKC,MAAQ,CACXd,SAAU,CACR,CACEH,KAAM,OACNC,MAAO,iBACPF,GAAI,KAEN,CACEC,KAAM,MACNC,MAAO,gBACPF,GAAI,KACH,CACDC,KAAM,OACNC,MAAO,iBACPF,GAAI,KAEN,CACEC,KAAM,OACNC,MAAO,iBACPF,GAAI,KAEN,CACEC,KAAM,OACNC,MAAO,iBACPF,GAAI,KAEN,CACEC,KAAM,OACNC,MAAO,iBACPF,GAAI,KAEN,CACEC,KAAM,OACNC,MAAO,iBACPF,GAAI,KAEN,CACEC,KAAM,OACNC,MAAO,iBACPF,GAAI,MAIRe,YAAa,IA7CH,E,iFAgDO,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAKtH,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAgBrB,EAASsB,QAC7B,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAE7D,OACE,yBAAK9B,UAAU,OACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAQc,UAAWa,KAAKb,YACxB,kBAAC,EAAD,CAAUP,SAAUqB,S,GAhEVI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a933f703.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport \"./cards.css\"\nexport const Cards = props => (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monstor.id}?set=set2&size=180x180`} />\n        <h1>{props.monstor.name}</h1>\n        <p>{props.monstor.email}</p>\n    </div>\n);","import React from 'react';\nimport \"./card-list.css\"\nimport { Cards } from '../card/cards.jsx'\nexport const CardList = props => (\n    <div className=\"card-list\">\n        {props.monstors.map(monstor => (<Cards key={monstor.id} monstor={monstor} />))}\n    </div>\n\n);","import React from 'react';\nimport \"./search.css\";\nexport const Search = props => (\n    <input className=\"search-box\"\n        type=\"search\"\n        placeholder=\"Search For Data\"\n        onChange={props.searchFtn}\n    />\n)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/cardList/card-list.jsx';\nimport { Search } from './components/search/search.jsx';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monstors: [\n        {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"1\"\n        },\n        {\n          name: \"Cat\",\n          email: \"cat@gamil.com\",\n          id: \"2\"\n        }, {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"3\"\n        },\n        {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"4\"\n        },\n        {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"5\"\n        },\n        {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"6\"\n        },\n        {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"7\"\n        },\n        {\n          name: \"Loin\",\n          email: \"loin@gamil.com\",\n          id: \"8\"\n        }\n\n      ],\n      searchField: \"\"\n    }\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(users => this.setState({ monstors: users }));\n  }\n  searchFtn = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const { monstors, searchField } = this.state;\n    const filteredValue = monstors.filter(\n      monstor => monstor.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"app\">\n        <h1 className=\"h1\">Monstor App</h1>\n        <Search searchFtn={this.searchFtn} />\n        <CardList monstors={filteredValue} />\n      </div>\n    )\n  }\n\n\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}